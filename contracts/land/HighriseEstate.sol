// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

import "@openzeppelin-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin-upgradeable/contracts/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin-upgradeable/contracts/token/ERC721/extensions/ERC721RoyaltyUpgradeable.sol";
import "@openzeppelin-upgradeable/contracts/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin-upgradeable/contracts/token/ERC721/utils/ERC721HolderUpgradeable.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol";

import "../../interfaces/IHighriseLand.sol";

import "../opensea/Utils.sol";

function parseToCoordinates(uint32 tokenId) pure returns (int16[2] memory) {
    int16 x = int16(int32(tokenId >> 16));
    if (x >= 4096) {
        x = int16(int32((tokenId >> 16) | 0xFFFF0000));
    }
    int16 y = int16(int32(tokenId));
    return [x, y];
}

contract HighriseEstate is
    Initializable,
    ERC721Upgradeable,
    ERC721EnumerableUpgradeable,
    ERC721HolderUpgradeable,
    ERC721RoyaltyUpgradeable,
    AccessControlEnumerableUpgradeable
{
    using ERC165Checker for address;
    using Counters for Counters.Counter;

    // CONSTANTS
    bytes32 public constant OWNER_ROLE = keccak256("OWNER_ROLE");

    // ------------------------ STORAGE --------------------------------------
    string private _baseTokenURI;
    address private _land;
    Counters.Counter private _tokenIds;
    mapping(uint256 => uint256[]) public estatesToParcels;
    address private _openseaProxyRegistry;

    // -----------------------------------------------------------------------

    // ------------------------ INITIALIZER -----------------------------------
    function initialize(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        address land,
        address openseaProxyRegistry
    ) public virtual initializer {
        require(
            land.supportsInterface(type(IHighriseLand).interfaceId),
            "IS_NOT_HIGHRISE_LAND_CONTRACT"
        );
        require(
            land.supportsInterface(type(IERC721).interfaceId),
            "IS_NOT_ERC721_CONTRACT"
        );
        __HighriseEstate_init(
            name,
            symbol,
            baseTokenURI,
            land,
            openseaProxyRegistry
        );
    }

    function __HighriseEstate_init(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        address land,
        address openseaProxyRegistry
    ) internal onlyInitializing {
        __ERC721_init(name, symbol);
        __ERC721Enumerable_init();
        __ERC721Holder_init();
        __AccessControlEnumerable_init();
        __HighriseEstate_init_unchained(
            name,
            symbol,
            baseTokenURI,
            land,
            openseaProxyRegistry
        );
    }

    function __HighriseEstate_init_unchained(
        string memory,
        string memory,
        string memory baseTokenURI,
        address land,
        address openseaProxyRegistry
    ) internal onlyInitializing {
        _baseTokenURI = baseTokenURI;
        _land = land;
        _openseaProxyRegistry = openseaProxyRegistry;
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(OWNER_ROLE, msg.sender);
        _setDefaultRoyalty(msg.sender, 500);
    }

    // ------------------------------------------------------------------------

    /**
     * @dev Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
    The expected array shape is:
     | ----------   x
     | [0  1  2]
     | [3  4  5]
     | [6  7  8]
     y
     */
    function _isEstateShapeValid(uint32[] memory parcelIds) internal {
        uint256 size = 0;
        if (parcelIds.length == 9) {
            // We expect a 3x3 matrix.
            size = 3;
        } else if (parcelIds.length == 36) {
            size = 6;
        } else if (parcelIds.length == 81) {
            size = 9;
        } else if (parcelIds.length == 144) {
            size = 12;
        } else {
            require(false, "Invalid estate shape");
        }
        // For each row,
        for (uint256 y = 0; y < size; y++) {
            // For each X except the last,
            for (uint256 x = 0; x < size - 1; x++) {
                uint32 left = parcelIds[y * size + x];
                uint32 right = parcelIds[y * size + x + 1];
                require(
                    parseToCoordinates(left)[0] + 1 ==
                        parseToCoordinates(right)[0]
                );
            }
        }

        // For each column,
        for (uint256 x = 0; x < size; x++) {
            // For each Y except the last,
            for (uint256 y = 0; y < size - 1; y++) {
                uint32 upper = parcelIds[y * size + x];
                uint32 lower = parcelIds[(y + 1) * size + x];
                require(
                    (parseToCoordinates(upper)[1] + 1) ==
                        parseToCoordinates(lower)[1]
                );
            }
        }
    }

    function mintFromParcels(uint32[] memory tokenIds)
        public
        returns (uint256)
    {
        _isEstateShapeValid(tokenIds);
        IHighriseLand(_land).bindToEstate(msg.sender, tokenIds);
        _tokenIds.increment();
        uint256 tokenId = _tokenIds.current();
        estatesToParcels[tokenId] = tokenIds;
        _mint(msg.sender, tokenId);
        return tokenId;
    }

    function burn(uint256 tokenId) public {
        require(
            _exists(tokenId),
            "ERC721: operator query for nonexistent token"
        );
        require(
            _isApprovedOrOwner(msg.sender, tokenId),
            "ERC721Burnable: caller is not owner nor approved"
        );
        uint256[] memory parcels = estatesToParcels[tokenId];
        for (uint256 i = 0; i < parcels.length; i++) {
            IERC721(_land).safeTransferFrom(
                address(this),
                msg.sender,
                parcels[i]
            );
        }
        _burn(tokenId);
    }

    // --------------------------------------- OVERRIDES ---------------------------------------------
    // The following functions are overrides required by Solidity.
    function _burn(uint256 tokenId)
        internal
        override(ERC721Upgradeable, ERC721RoyaltyUpgradeable)
    {
        super._burn(tokenId);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(
            AccessControlEnumerableUpgradeable,
            ERC721Upgradeable,
            ERC721EnumerableUpgradeable,
            ERC721RoyaltyUpgradeable
        )
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    // -----------------------------------------------------------------------------------------------

    // ----------------------- HELPER LOGIC --------------------------------------------
    function ownerTokens(address owner) public view returns (uint256[] memory) {
        uint256 balance = balanceOf(owner);
        uint256[] memory tokens = new uint256[](balance);

        for (uint256 i = 0; i < balance; i++) {
            tokens[i] = tokenOfOwnerByIndex(owner, i);
        }

        return tokens;
    }

    function setBaseTokenURI(string memory baseTokenURI)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _baseTokenURI = baseTokenURI;
    }

    // ---------------------------------------------------------------------------------

    // ------------------------- OWNERSHIP ---------------------------------------------
    /**
     * @dev Returns the address of the current owner.
     * Only one wallet can have owner role at the time.
     * Ensured by internal policy.
     */
    function owner() public view returns (address) {
        return getRoleMember(OWNER_ROLE, 0);
    }

    // ---------------------------------------------------------------------------------

    // ----------------------- OPEN SEA REGISTRY ---------------------------------------
    /**
     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.
     */
    function isApprovedForAll(address owner, address operator)
        public
        view
        override(ERC721Upgradeable, IERC721Upgradeable)
        returns (bool)
    {
        // Whitelist OpenSea proxy contract for easy trading.
        ProxyRegistry openseaRegistry = ProxyRegistry(_openseaProxyRegistry);
        if (address(openseaRegistry.proxies(owner)) == operator) {
            return true;
        }

        return super.isApprovedForAll(owner, operator);
    }

    // ---------------------------------------------------------------------------------
}
